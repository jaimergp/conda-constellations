- name: meta.yaml
  description: |
    All the metadata in the conda-build recipe is specified in the meta.yaml file. It contains info
    such as the package name, version, source URL, build dependencies, runtime requirements, tests
    and licensing. It supports Jinja and platform selectors.
  url:
    - https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html
    - https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html
  categories:
    - for-packagers
    - build-instructions
    - conda

- name: conda_build_config.yaml
  description: |
    Conda build can produce variants of the same package (e.g. different Python versions). This file
    controls the variables injected to meta.yaml. This is the main mechanism behind
    'conda-forge-pinning'.
  url: https://docs.conda.io/projects/conda-build/en/latest/resources/variants.html
  categories:
    - for-packagers
    - build-instructions
    - conda

- name: setup.py
  description: |
    Distutils/setuptools script that provides a function to install a Python package with or without
    compiled extensions.
  url: https://docs.python.org/3/distutils/setupscript.html
  categories:
    - for-packagers
    - build-instructions
    - wheels

- name: setup.cfg
  description: |
    Accompanying metadata file for setup.py that defines some configuration parameters.
  url: https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html
  categories:
    - for-packagers
    - build-instructions
    - wheels

- name: pyproject.toml
  description: |
    Static file that provides all the information necessary to create an installable Python package.
    This alleviates the main problem of setup.py: its contents are dynamic and need to be executed to
    get retrieved.
  url:
    - https://www.python.org/dev/peps/pep-0517/
    - https://www.python.org/dev/peps/pep-0518/
    - https://python-poetry.org/docs/pyproject/
    - https://setuptools.readthedocs.io/en/latest/build_meta.html
  categories:
    - for-packagers
    - build-instructions
    - wheels

- name: environment.yaml
  description: |
    A file specifying conda packages and what channels to get them from. Users can also add pip
    packages here. It can be ingested by conda/mamba env and micromamba create. The tool will solve
    the environment and install the required packages.
  url: https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-file-manually
  categories:
    - for-users
    - install-instructions
    - conda
    - wheels

- name: conda.lock
  description: |
    Contains the definitions of an already solved conda environment. It can be generated by
    conda-lock, and consumed by conda install -f.
  url: https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#building-identical-conda-environments
  categories:
    - for-users
    - install-instructions
    - conda

- name: poetry.lock
  description: |
    Similar to conda-lock, Poetry can freeze an existing virtual environment, writing the exact
    package definitions to this file.
  url: https://python-poetry.org/docs/basic-usage/#installing-with-poetrylock
  categories:
    - for-users
    - install-instructions
    - conda

- name: Pipfile
  description: |
    A better way of specifying requirements for a project. Instead of keeping several `requirements.txt`
    files around, you can specify different categories in the same file.
  url: https://pipenv-fork.readthedocs.io/en/latest/basics.html#example-pipfile-pipfile-lock
  categories:
    - for-users
    - install-instructions
    - wheels

- name: Pipfile.lock
  description: |
    When Pipenv solves a Pipfile (finds the dependencies of the specified requirements in Pipfile),
    the resulting list is "frozen" to this lock file, including exact versions and hashes.
  url: https://pipenv-fork.readthedocs.io/en/latest/basics.html#example-pipfile-pipfile-lock
  categories:
    - for-users
    - install-instructions
    - wheels

- name: requirements.txt
  description: |
    A file containing a list of packages (and some command line options) to be installed by pip.
  url: https://pip.pypa.io/en/stable/cli/pip_install/#requirements-file-format
  categories:
    - for-users
    - install-instructions
    - wheels

- name: repodata.json
  description: |
    Conda channels store package metadata for each architecture (linux-64, win-64, etc) in these
    JSON files. Each package reports here which package they depend on, among other things.
  url:
    https://docs.conda.io/projects/conda-build/en/latest/concepts/generating-index.html#repodata-json
    - users
    - for-packagers
  categories:
    - package-index
    - conda

- name: current_repodata.json
  description: |
    Stripped down repodata.json which only contains the last build of each package, plus their
    dependencies, recursively. It simplifies the solver stage in some cases.
  url:
    https://docs.conda.io/projects/conda-build/en/latest/concepts/generating-index.html#trimming-to-current-repodata
    - users
    - for-packagers
  categories:
    - package-index
    - conda

- name: channeldata.json
  description: |
    A channel-wide metadata file that contains an index of all the conda packages present across all
    architectures in the channel.
  url:
    https://docs.conda.io/projects/conda-build/en/latest/concepts/generating-index.html#channeldata-json
    - users
    - for-packagers
  categories:
    - package-index
    - conda

- name: .tar.bz2
  description: |
    Conda packages are distributed as bzip2-compressed tarballs, including the package files and some
    metadata.
  url:
    https://docs.conda.io/projects/conda-build/en/latest/concepts/generating-index.html#channeldata-json
    - users
    - for-packagers
  categories:
    - package-format
    - conda

- name: .conda
  description: |
    The .conda file format was introduced in conda 4.7 as a more compact, and thus faster, alternative
    to a tarball. The .conda file format consists of an outer, uncompressed ZIP-format container, with
    2 inner compressed .tar files.
  url:
    https://docs.conda.io/projects/conda/en/latest/user-guide/concepts/packages.html#conda-file-format
    - users
    - for-packagers
  categories:
    - package-format
    - conda

- name: sdist
  description: |
    A source code distribution available in PyPI, packaged as `.tar.gz`. Pip will prefer wheels by
    default.
  url: https://docs.python.org/3/distutils/sourcedist.html
    - users
    - for-packagers
  categories:
    - package-format
    - wheels

- name: wheel
  description: |
    Platform-specific build of a PyPI package that can contain compiled libraries. Pip will prefer
    this even if a sdist is present. Extension is `.whl`.
  url: https://www.python.org/dev/peps/pep-0427/
    - users
    - for-packagers
  categories:
    - package-format
    - wheels
